import os
import requests
import random
import statistics

API_KEY = os.getenv("OWM_API_KEY")
if not API_KEY:
    raise SystemExit("Missing OWM_API_KEY. Set it before running (see README).")

BASE_URL = "https://api.openweathermap.org/data/2.5/weather"
UNITS = "metric"

# –°–ø–∏—Å—ä–∫ —Å –≥—Ä–∞–¥–æ–≤–µ –æ—Ç —Ü–µ–ª–∏—è —Å–≤—è—Ç
CITY_POOL = [
    "Sofia,BG", "Plovdiv,BG", "Varna,BG", "Burgas,BG",
    "London,GB", "Paris,FR", "Berlin,DE", "Rome,IT", "Madrid,ES",
    "New York,US", "Los Angeles,US", "Toronto,CA", "Vancouver,CA",
    "Tokyo,JP", "Seoul,KR", "Beijing,CN", "Sydney,AU", "Melbourne,AU",
    "Cairo,EG", "Istanbul,TR", "Athens,GR", "Stockholm,SE", "Oslo,NO",
    "Dubai,AE", "Singapore,SG", "Bangkok,TH", "Rio de Janeiro,BR", "Buenos Aires,AR"
]

def fetch_weather(city: str):
    """–í—Ä—ä—â–∞ JSON —Å –≤—Ä–µ–º–µ—Ç–æ –∑–∞ –¥–∞–¥–µ–Ω –≥—Ä–∞–¥ –∏–ª–∏ None –ø—Ä–∏ –≥—Ä–µ—à–∫–∞."""
    url = f"{BASE_URL}?q={city}&appid={API_KEY}&units={UNITS}"
    try:
        r = requests.get(url, timeout=10)
        r.raise_for_status()
        return r.json()
    except requests.RequestException:
        return None

def interpret_condition(weather_data):
    """–í—Ä—ä—â–∞ –¥–∞–ª–∏ –µ —Å–ª—ä–Ω—á–µ–≤–æ, –æ–±–ª–∞—á–Ω–æ –∏–ª–∏ –≤–∞–ª–∏ + –µ–º–æ—Ç–∏–∫–æ–Ω–∞."""
    weather_main = weather_data["weather"][0]["main"]
    clouds = weather_data.get("clouds", {}).get("all", 0)

    if weather_main in ["Rain", "Drizzle", "Thunderstorm"]:
        return "üåßÔ∏è –≤–∞–ª–∏"
    elif weather_main == "Snow":
        return "‚ùÑÔ∏è —Å–Ω—è–≥"
    elif weather_main == "Clear":
        return "‚òÄÔ∏è —Å–ª—ä–Ω—á–µ–≤–æ"
    elif clouds >= 50:
        return "‚òÅÔ∏è –æ–±–ª–∞—á–Ω–æ"
    else:
        return f"üå§Ô∏è {weather_data['weather'][0]['description']}"

def print_city_info(data):
    """–ò–∑–≤–µ–∂–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –≥—Ä–∞–¥."""
    name = data["name"]
    temp = data["main"]["temp"]
    humidity = data["main"]["humidity"]
    condition = interpret_condition(data)
    print(f"- {name}: {condition}, üå°Ô∏è {temp:.1f} ¬∞C, üíß –≤–ª–∞–∂–Ω–æ—Å—Ç {humidity}%")
    return name, temp

def five_random_cities():
    """–ò–∑–±–∏—Ä–∞ 5 —Å–ª—É—á–∞–π–Ω–∏ –≥—Ä–∞–¥–∞ –∏ –ø–æ–∫–∞–∑–≤–∞ –¥–∞–Ω–Ω–∏—Ç–µ."""
    print("üåç –í—Ä–µ–º–µ—Ç–æ –≤ 5 —Å–ª—É—á–∞–π–Ω–∏ –≥—Ä–∞–¥–∞:\n")
    chosen = random.sample(CITY_POOL, 5)
    temps = []
    for city in chosen:
        data = fetch_weather(city)
        if data:
            name, temp = print_city_info(data)
            temps.append((name, temp))
        else:
            print(f"- {city}: ‚ùå –≥—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∑–∏–º–∞–Ω–µ –Ω–∞ –¥–∞–Ω–Ω–∏.")
    return temps

def show_statistics(temps):
    """–ò–∑–≤–µ–∂–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –≥—Ä–∞–¥–æ–≤–µ—Ç–µ."""
    if not temps:
        print("\n‚ùå –ù—è–º–∞ –¥–∞–Ω–Ω–∏ –∑–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞.")
        return
    coldest_city, coldest_temp = min(temps, key=lambda x: x[1])
    avg_temp = statistics.mean(t for _, t in temps)
    print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:")
    print(f"* ü•∂ –ù–∞–π-—Å—Ç—É–¥–µ–Ω –≥—Ä–∞–¥: {coldest_city} ({coldest_temp:.1f} ¬∞C)")
    print(f"* üå°Ô∏è –°—Ä–µ–¥–Ω–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {avg_temp:.1f} ¬∞C")

def interactive_lookup():
    """–ü–æ–∑–≤–æ–ª—è–≤–∞ –Ω–∞ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è –¥–∞ –≤—ä–≤–µ–¥–µ –≥—Ä–∞–¥ –∏ –∏–∑–≤–µ–∂–¥–∞ –∏–Ω—Ñ–æ."""
    print("\nüîé –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≥—Ä–∞–¥ –ø–æ –∏–∑–±–æ—Ä (Enter –∑–∞ –∫—Ä–∞–π):")
    while True:
        city = input("–í—ä–≤–µ–¥–∏ –≥—Ä–∞–¥ (–ø—Ä–∏–º–µ—Ä: London,GB): ").strip()
        if not city:
            break
        data = fetch_weather(city)
        if data:
            print_city_info(data)
        else:
            print("‚ùå –ì—Ä–µ—à–∫–∞: –Ω–µ –º–æ–∂–µ –¥–∞ —Å–µ –∑–∞—Ä–µ–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.")

def main():
    temps = five_random_cities()
    show_statistics(temps)
    interactive_lookup()

if __name__ == "__main__":
    main()
